<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Release_Notes.ent">
%BOOK_ENTITIES;
]>
<section id="Methods_for_Upgrading">
	<title>Methods for Upgrading Retirement</title>
			  <section id="Upgrade_Method_for_New_Users">
			    <title>Upgrade Method for New Users</title>
			      <para>
				To avoid any collisions between the retirement functionality of the customer's domain(s) and that of the CloudForms Management Engine's domain, rename the customers domain(s) <guilabel>Retirement</guilabel> <guilabel>StateMachine</guilabel> <guilabel>Namespace</guilabel> and thoroughly test the new CloudForms Management Engine domain enhanced Retirement functionality, prior to use in production.
			      </para>
			      <para>
				Rename selected namespaces in the customers domain by using the <guilabel>Automate</guilabel> Explorer.
			      </para>
			      <procedure>
				<title>Changing the Namespace for Cloud</title>
				   <step>
				    <para>
				     Navigate to <menuchoice><guimenu>Automate</guimenu><guisubmenu>Explorer</guisubmenu></menuchoice>.
				    </para>
				   </step>
				   <step>
				    <para>
				      Select your <guilabel>Datastore</guilabel>.
				    </para>
				   </step>
				   <step>
				    <para>
				     From the accordion menu, click <menuchoice><guimenu>Cloud</guimenu><guimenuitem>VM</guimenuitem><guimenuitem>Provisioning</guimenuitem><guimenuitem>StateMachines</guimenuitem></menuchoice>.
				    </para>
				   </step>
				   <step>
				    <para>
				      Click <inlinemediaobject>
					      <imageobject>
						<imagedata fileref="images/1847.png" />
					      </imageobject>
					    </inlinemediaobject><guibutton>(Configuration)</guibutton>, then 
					    <inlinemediaobject>
					      <imageobject>
						<imagedata fileref="images/1851.png" />
					      </imageobject>
					    </inlinemediaobject><guibutton>(Edit this Namespace)</guibutton>.
				    </para>
				   </step>
				   <step>
				    <para>
				      Type in a unique <guilabel>Name</guilabel> and <guilabel>Description</guilabel>. 
				    </para>
				   </step>
				   <step>
				    <para>
				      Click <guibutton>Save</guibutton>.
				    </para>
				   </step>
				  </procedure>
				  <procedure>
				    <title>Changing the Namespace for Infrastructure</title>
				    <step>
				      <para>
				      Navigate to <menuchoice><guimenu>Automate</guimenu><guisubmenu>Explorer</guisubmenu></menuchoice>.
				      </para>
				    </step>
				    <step>
				      <para>
					Select your <guilabel>Datastore</guilabel>.
				      </para>
				    </step>
				    <step>
				      <para>
				      From the accordion menu, click <menuchoice><guimenu>Infrastructure</guimenu><guimenuitem>VM</guimenuitem><guimenuitem>Provisioning</guimenuitem><guimenuitem>StateMachines</guimenuitem></menuchoice>.
				      </para>
				    </step>
				    <step>
				      <para>
				      Click 
				      <inlinemediaobject>
					<imageobject>
					  <imagedata fileref="images/1847.png" />
					</imageobject>
				      </inlinemediaobject><guibutton>(Configuration)</guibutton>, then 
				      <inlinemediaobject>
					<imageobject>
					  <imagedata fileref="images/1851.png" />
					</imageobject>
				      </inlinemediaobject><guibutton>(Edit this Namespace)</guibutton>.
				      </para>
				    </step>
				    <step>
				      <para>
				      Type in a unique <guilabel>Name</guilabel> and <guilabel>Description</guilabel>. 
				      </para>
				    </step>
				    <step>
				      <para>
				      Click <guibutton>Save</guibutton>.
				    </para>
				    </step>
				  </procedure>
				  <procedure>
				    <title>Changing the namespace for Service</title>
				    <step>
				      <para>
				      Navigate to <menuchoice><guimenu>Automate</guimenu><guisubmenu>Explorer</guisubmenu></menuchoice>.
				    </para>
				    </step>
				    <step>
				      <para>
					Select your <guilabel>Datastore</guilabel>.
				      </para>
				    </step>
				    <step>
				      <para>
				      From the accordion menu, click <menuchoice><guimenu>Service</guimenu><guimenuitem>Provisioning</guimenuitem><guimenuitem>StateMachines</guimenuitem></menuchoice>.
				      </para>
				    </step>
				    <step>
				      	<para>
					Click 
					<inlinemediaobject>
					  <imageobject>
						<imagedata fileref="images/1847.png" />
					  </imageobject>
					</inlinemediaobject><guibutton>(Configuration)</guibutton>, then 
					<inlinemediaobject>
					  <imageobject>
						<imagedata fileref="images/1851.png" />
					  </imageobject>
					</inlinemediaobject><guibutton>(Edit this Namespace)</guibutton>.
					</para>
				    </step>
				    <step>
				      <para>
				      Type in a unique <guilabel>Name</guilabel> and <guilabel>Description</guilabel>. 
				      </para>
				    </step>
				    <step>
				      <para>
				      Click <guibutton>Save</guibutton>.
				    </para>
				    </step>
				  </procedure>
		</section>
		<section id="Upgrade_Method_for_Existing_Users">
		  <title>Upgrade Method for Existing Users Using Custom Code</title>
			    <para>This enhancement significantly changes the Retirement StateMachine and Automate methods. Users should evaluate each existing Retirement StateMachine and Automate methods to see where they fit in the new Automate model. All modifications should be thoroughly tested prior to use in production. 
Please review the retirement state changes here: <ulink url="https://access.redhat.com/documentation/en-US/Red_Hat_CloudForms/3.2/html/Lifecycle_and_Automation_Guide/Phase_5_Retirement1.html"> B.5. Phase 5: Retirement</ulink>.
			    </para>
		 </section>
		 <section id="Backward_Compatibility_for_Existing_Users">
		  <title>Backward Compatibility for Existing Customers Using the Old Style Automate Model</title>
		  <important>	    
		  <para>This option is not recommended. The existing Retirement StateMachine has many potential issues that have been corrected in this release and deviation from the new standard Retirement StateMachine could cause additional confusion and difficulty in resolving retirement issues.
			    </para>
			  </important>
			  <para>
			    A major feature of the new retirement is that it exposes the functionality to Automate. Modifications to the Automate Model by adding an Automate Method to the customer's existing StateMachine enables existing users to achieve backward compatibility and makes it possible to use the old style Retirement StateMachine, with the exception of policy.
			  </para>
			  <para>
			    The previous VM retirement functionality:
			      <itemizedlist>
				<listitem>
				  <para>
				    Set the VM retired flag 
				  </para>
				</listitem>
				<listitem>
				  <para>
				    Set the VM retire_date value
				  </para>
				</listitem>
				<listitem>
				  <para>
				    Stopped a running VM
				  </para>
				</listitem>
				<listitem>
				  <para>
				    Called into the Retirement StateMachine
				  </para>
				</listitem>
			      </itemizedlist>
			  </para>
			  <para>
			    The previous VM retirement functionality can be attained by modifying the StateMachine to use the old Retirement StateMachine.
			  </para>
			      <note>
				<para>
				  For the following directions, the domain references of <replaceable>CUSTOMER</replaceable> means the customer domain containing the old Automate Model which has a higher priority than the ManageIQ shipped domain.
				</para>
			      </note>
			      <procedure>
				<title>Modifying the StateMachine</title>
				<step>
				<para>
				  Add new event instance, <emphasis>request_vm_retire</emphasis> event to <menuchoice><guimenu>System</guimenu><guimenuitem>Event</guimenuitem></menuchoice> class in the <replaceable>CUSTOMER</replaceable> domain.
				    <orderedlist numeration="loweralpha">
				      <listitem>
					<para>
					  Set logical event to <emphasis>vm_retired</emphasis>
					</para>
				      </listitem>
				       <listitem>
					<para>
					 Set rel5 value to point to the same value that is set in the <menuchoice><guimenu>System</guimenu><guimenuitem>Event</guimenuitem><guimenuitem>vm_retired</guimenuitem></menuchoice> rel5 relationship in the <replaceable>CUSTOMER</replaceable> domain.  
					</para>
				      </listitem>
				    </orderedlist>
				    <note>
				      <para>
					Value is most likely to be: <menuchoice><guimenu>Automation</guimenu><guimenuitem>VMLifecycle</guimenuitem><guimenuitem>Retirement?vm_id=${process#vm_id}</guimenuitem></menuchoice>.
				      </para>
				    </note>
				</para>
			      </step>
			      <step>
				<para>
				  Change schema for <replaceable>CUSTOMER</replaceable> domain:<menuchoice><guimenu>Factory</guimenu><guimenuitem>StateMachines</guimenuitem><guimenuitem>VMRetirement</guimenuitem></menuchoice> class to add a new entry.
				    <itemizedlist>
					<listitem>
					  <para>
					      name: preretirement
					  </para>
					</listitem>
					<listitem>
					  <para>
					    type: state
					  </para>
					</listitem>
					<listitem>
					  <para>
					    datatype: string
					  </para>
					</listitem>
					<listitem>
					  <para>
					    subst flag = true
					  </para>
					</listitem>
					<listitem>
					  <para>
					    message: create
					  </para>
					</listitem>
					<listitem>
					  <para>
					   on_entry: update_retirement_status(status => ’Starting preretirement’) 
					  </para>
					</listitem>
					<listitem>
					  <para>
					    on_exit: update_retirement_status(status => ‘Ended preretirement’)
					  </para>
					</listitem>
					<listitem>
					  <para>
					   on_error: update_retirement_status(status => 'Error in preretirement’) 
					  </para>
					</listitem>
				      </itemizedlist>
				</para>
			      </step>
			      <step>
				<para>
				  Change the schema sequence, if necessary. The new <guilabel>Preretirement</guilabel> state should be the first state in the <guilabel>StateMachine</guilabel>. 
				</para>
			      </step>
			      <step>
				<para>
				  Change <menuchoice><guimenu>Factory</guimenu><guimenuitem>StateMachines</guimenuitem><guimenuitem>VMRetirement</guimenuitem><guimenuitem>Defualt</guimenuitem></menuchoice> instance:  add preretirement value of: <menuchoice><guimenu>Factory</guimenu><guimenuitem>StateMachines</guimenuitem><guimenuitem>Preretirement</guimenuitem></menuchoice>.
				</para>
			      </step>
			      <step>
				<para>
				  Add instance: <menuchoice><guimenu>Factory</guimenu><guimenuitem>StateMachines</guimenuitem><guimenuitem>Preretirement</guimenuitem></menuchoice>
				  set execute attribute value to: <guimenuitem>Preretirement</guimenuitem>. 
				</para>
			      </step>
			      <step>
				<para>
				  Add method: <menuchoice><guimenu>Factory</guimenu><guimenuitem>StateMachines</guimenuitem><guimenuitem>Preretirement</guimenuitem></menuchoice> with the following content:
				  <itemizedlist>
				    <listitem>
				      <para>
				      vm = $evm.root[‘vm’]
				      </para>
				    </listitem>
				    <listitem>
				      <para>
				      vm.finish_retirement if vm
				      </para>
				    </listitem>
				  </itemizedlist>
				  <note>
				    <para>
				      The reason for calling the <emphasis>finish_retirement</emphasis> method in the preretirement state is that the previous retirement process immediately set the retired flag and <emphasis>retired_on</emphasis> date.  The enhanced retirement process waits until the retirement is finished before it sets the retired and <emphasis>retires_on attributes</emphasis>.  By using the <emphasis>finish_retirement</emphasis> method, CloudForms Management Engine is reverting back to the old behavior so that the customers using existing retirement state machine can proceed as before.
				    </para>
				  </note>
				</para>
			      </step>
			    </procedure>
			  </section>
</section>
			