<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Methods_Available_for_Automation.ent">
%BOOK_ENTITIES;
]>
<section id="Base_Methods" remap="TID_15673">
	<title>Base Methods</title>
	<para>
		These methods may be used with all objects available in the Automate Model.
	</para>
	<informaltable frame="all">
		<tgroup cols="2">
			<thead>
				<row>
					<entry>
						<para>
							Method
						</para>
					</entry>
					<entry>
						<para>
							Usage
						</para>
					</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>
						<para>
							inspect
						</para>
					</entry>
					<entry>
						<para>
							Returns a string containing a list of attributes of the object. See the <guilabel>InspectMe</guilabel> method in <guilabel>Samples</guilabel> class
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							inspect_all
						</para>
					</entry>
					<entry>
						<para>
							Returns all information for an object
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							virtual_column_names
						</para>
					</entry>
					<entry>
						<para>
							Returns the objects virtual columns names
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							virtual_columns_inspect
						</para>
					</entry>
					<entry>
						<para>
							Returns the objects virtual columns and values
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							reload
						</para>
					</entry>
					<entry>
						<para>
							Returns to original object to prevent the internal object from being returned
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							model_suffix
						</para>
					</entry>
					<entry>
						<para>
							Returns objects suffix. For an object of type MiqAeServiceVmVmware, returns <guilabel>"Vmware"</guilabel>
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							tagged_with?(category, name)
						</para>
					</entry>
					<entry>
						<para>
							Is the object tagged with the category and name specified?
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							tags(category = nil)-- this means that category is an optional parameter, with a default of nil
						</para>
					</entry>
					<entry>
						<para>
							Returns the tags.
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							tag_assign(tag)
						</para>
					</entry>
					<entry>
						<para>
							Assigns tag to the object, except for the <literal>miq_provision</literal> object, which uses <literal>add_tag(category, tag_name)</literal>
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							tag_unassign(tag)
						</para>
					</entry>
					<entry>
						<para>
							Unassigns tag to the object, except for the <literal>miq_provision</literal> object, which uses <literal>clear_tag(category, tag_name)</literal>
						</para>
					</entry>
				</row>
			</tbody>
		</tgroup>
	</informaltable>
	<para>
		The <guilabel>InspectMe</guilabel> <guilabel>Sample Method</guilabel> uses many of the Methods shown in this document. The method returns attributes of the <productname>CloudForms Management Engine</productname> Server and then returns attributes for the host, cluster, and virtual machine from the provider of invocation. In many environments it is linked to a button.
	</para>
	<programlisting language="Ruby">
<![CDATA[
###################################
# EVM Automate Method: InspectMe
#
# Notes: Dump the objects in storage to the automation.log
#
###################################
begin
  @method = 'InspectMe'
  @log_prefix = "[#{@method}]"
  $evm.log("info", "#{@log_prefix} - EVM Automate Method Started")

  # Turn on verbose logging
  @debug = true



  # List the types of object we will try to detect
  obj_types = %w{ vm host storage ems_cluster ext_management_system }
  obj_type = $evm.root.attributes.detect { |k,v| obj_types.include?(k)}

  # uncomment below to dump root object attributes
  dumpRoot

  # uncomment below to dump miq_server object attributes
  dumpServer


  # If obj_type is NOT nil
  unless obj_type.nil?
    rootobj = obj_type.first
    obj = obj_type.second
    $evm.log("info", "#{@log_prefix} - Detected Object:<#{rootobj}>")
    $evm.log("info","")

    case rootobj
    when 'host' then dumpHost(obj)
    when 'vm' then dumpVM(obj)
    when 'ems_cluster' then dumpCluster(obj)
    when 'ext_management_system' then dumpEMS(obj)
    when 'storage' then dumpStorage(obj)
    end
  end

  #
  # Exit method
  #
  $evm.log("info", "#{@log_prefix} - EVM Automate Method Ended")
  exit MIQ_OK

  #
  # Set Ruby rescue behavior
  #
rescue => err
  $evm.log("error", "#{@log_prefix} - [#{err}]\n#{err.backtrace.join("\n")}")
  exit MIQ_ABORT
end
]]>
</programlisting>
</section>