<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Control_Guide.ent">
%BOOK_ENTITIES;
]>
<appendix id="appe-Regular_Expressions">
	<title>Regular Expressions</title> 
	<para>
		In <productname>CloudForms Management Engine</productname>, regular expressions can be used to search the contents of a file for a specific string for use in a condition. Below are listed the items most commonly used with <productname>CloudForms Management Engine</productname> to search strings. These are a small subset of all the items available to use in regular expressions. If you are unfamiliar with regular expressions, there are many resources available on the Internet, including <ulink url="http://www.regular-expressions.info/">www.regular-expressions.info</ulink>. Note that if you want to search a file, you must collect it as part of a host analysis profile.
	</para>
	<table frame="all">
		<title>Regular Expressions</title>
		<tgroup cols="2">
			<tbody>
				<row>
					<entry>
						<para>
							Anchors
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							^
						</para>
					</entry>
					<entry>
						<para>
							start of string
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							$
						</para>
					</entry>
					<entry>
						<para>
							end of string
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Character Classes
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\s
						</para>
					</entry>
					<entry>
						<para>
							white space including spaces, tabs, and line breaks
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\S
						</para>
					</entry>
					<entry>
						<para>
							not white space
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\d
						</para>
					</entry>
					<entry>
						<para>
							digit, same as [0-9]
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\D
						</para>
					</entry>
					<entry>
						<para>
							not digit
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\w
						</para>
					</entry>
					<entry>
						<para>
							word
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\W
						</para>
					</entry>
					<entry>
						<para>
							not word
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Quantifiers
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							*
						</para>
					</entry>
					<entry>
						<para>
							0 or more of preceding characters
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							+
						</para>
					</entry>
					<entry>
						<para>
							1 or more of preceding characters
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							?
						</para>
					</entry>
					<entry>
						<para>
							0 or 1 of preceding character
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Escape Character
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\
						</para>
					</entry>
					<entry>
						<para>
							put before a metacharacter to search for that actual character
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Metacharacters
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							^ [ . $ { * ( \ + ) | ? &lt; &gt;
						</para>
					</entry>
					<entry>
						<para>
							must be used with the Escape Character if you are searching specifically for it
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Special characters
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\n
						</para>
					</entry>
					<entry>
						<para>
							new line
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\t
						</para>
					</entry>
					<entry>
						<para>
							tab
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Groups and Ranges
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							.
						</para>
					</entry>
					<entry>
						<para>
							any character except new line (\n)
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							(a|b)
						</para>
					</entry>
					<entry>
						<para>
							a or b
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							()
						</para>
					</entry>
					<entry>
						<para>
							group
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							[abc]
						</para>
					</entry>
					<entry>
						<para>
							a or b or c
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							[^abc]
						</para>
					</entry>
					<entry>
						<para>
							not a or b or c
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							[a-q]
						</para>
					</entry>
					<entry>
						<para>
							letter between a and q
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							[A-Q]
						</para>
					</entry>
					<entry>
						<para>
							upper case letter between A and Q
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							[0-7]
						</para>
					</entry>
					<entry>
						<para>
							digit between 0 and 7
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Pattern modifiers
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							i
						</para>
					</entry>
					<entry>
						<para>
							case insensitive
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Other helpers
						</para>
					</entry>
					<entry>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							.*
						</para>
					</entry>
					<entry>
						<para>
							swallows text between 2 words
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\s+
						</para>
					</entry>
					<entry>
						<para>
							guarantees minimum of 1 whitespace between 2 words
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\s*
						</para>
					</entry>
					<entry>
						<para>
							guarantees 0 or more whitespace between 2 words
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							^\s*
						</para>
					</entry>
					<entry>
						<para>
							beginning of line with zero or more whitespace
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\s+.*
						</para>
					</entry>
					<entry>
						<para>
							swallows all text and white space between 2 words
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							\d+
						</para>
					</entry>
					<entry>
						<para>
							guarantees minimum of 1 number between 2 words
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para> 
							&lt;\w&gt;
						</para>
					</entry>
					<entry>
						<para>
							identical to &lt;[a-zA-Z0-(_]&gt;
						</para>
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table> 
	<!--para>
		Examples
	</para-->
	<table frame="all">
		<title>Examples</title>
		<tgroup cols="2">
			<tbody>
				<row>
					<entry>
						<para>
							Description
						</para>
					</entry>
					<entry>
						<para>
							Regular Expression
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							([A-Za-z0-9]+)
						</para>
					</entry>
					<entry>
						<para>
							Letters, numbers, hyphens
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Find the line beginning with sshd. Then, using a colon : as delimiter, check that the value four ":" over is equal to 99999
						</para>
					</entry>
					<entry>
						<para>
							^sshd:[^:]*:[^:]*:[^:]*:99999:
						</para>
						<para />
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Verify that PASS_MAX_DAYS exists starting in position 1 and a value after it is &lt;= 90
						</para>
					</entry>
					<entry>
						<para>
							^\s*PASS_MAX_DAYS\s+([0-9]|[1-8][0-9]|90)
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Verify that ROOTPW (in any case) exists on an uncommented line
						</para>
					</entry>
					<entry>
						<para>
							/^[^#]*ROOTPW/i
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Verify that line in file starts with size and the value after is &lt;= 4096k
						</para>
					</entry>
					<entry>
						<para>
							^\s*size\s+(409[0-6]|40[0-8][0-9]|[123][09]{3}|\d{1,3})k
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Find line with string restrict 127.0.0.1 that starts in position 1 to ensure it is not commented out
						</para>
					</entry>
					<entry>
						<para>
							^\s*restrict\s+127\.0\.0\.1
						</para>
					</entry>
				</row>
				<row>
					<entry>
						<para>
							Find an uncommented line that contains "/home". There will be additional text before the desired string
						</para>
					</entry>
					<entry>
						<para>
							^[^#]*\/home
						</para>
					</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	<para />
</appendix>